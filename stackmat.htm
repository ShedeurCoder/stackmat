<!DOCTYPE html>
<html class=" mfyzvcgg idc0_343" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

	<title>Virtual TD - StackMatch</title>

	<meta charset="UTF-8">

	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
	<meta name="theme-color" content="#d4d6d5">

	<meta property="og:site_name" content="theWSSA.com">
	<meta property="og:type" content="article">
	<meta property="og:url" content="http://thewssa.com/timer/">
	<meta property="og:title" content="Virtual TD (Sport Stacking)">
	<meta property="og:description" content="">
	<meta property="og:image" content="">

	<link rel="icon" href="https://stackmatch.thewssa.com/favicon.png" type="image/x-icon">
	<link rel="shortcut icon" href="https://stackmatch.thewssa.com/favicon.png" type="image/x-icon">
	<link rel="icon" sizes="192x192" href="https://stackmatch.thewssa.com/favicon-192.png">
	<link rel="apple-touch-icon" sizes="128x128" href="https://stackmatch.thewssa.com/favicon-128.png">

	<link rel="manifest" href="https://stackmatch.thewssa.com/manifest.json">

	<!-- <link rel="stylesheet" href="stackmat_files/all.css" integrity="sha384-IIED/eyOkM6ihtOiQsX2zizxFBphgnv1zbe1bKA+njdFzkr6cDNy16jfIKWu4FNH" crossorigin="anonymous"> -->
	<!-- <link href="stackmat_files/css.css" rel="stylesheet" type="text/css"> -->

	
	<!-- <link rel="stylesheet" type="text/css" media="all" href="stackmat_files/min.css"> -->
	
	<script type="text/javascript" async="" src="stackmat_files/analytics.js"></script><script>
		var page = 'none';
	    var lang = {
        	        loading:"",
        	        download:"",
        	        required:""
        	        };
	</script>

	<script src="stackmat_files/jquery.js"></script>

        <script src="stackmat_files/min.php" charset="utf-8"></script>
	<script src="stackmat_files/push.min.js" charset="utf-8"></script>

	
	<!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="stackmat_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-2425608-10');
</script>



<meta class="foundation-mq">
<link rel="stylesheet" href="custom.css"></head>
<body>


	<a href="#" class="load button expand connect-to-timer" style="font-size:4em;">Connect to Timer</a>

	<div class="timer-display" style="font-size: 16vw; display: none; text-align:center;">
		<div>
		
		<span id="d_1" style=""></span>
		<span id="d_2" style="width: 8%; display: inline-block;"></span>
		<span id="d_3" style="width: 8% ;display: inline-block;">0</span>
		<span style="width:10px;display: inline-block;" class="dot">.</span>
		<span id="d_4" style="width: 8%; display: inline-block;">0</span>
		<span id="d_5" style="width: 8%; display: inline-block;">0</span>
		<span id="d_6" style="width: 8%; display: inline-block;">0</span>

		<em>SPEED STACKS</em>
		</div>
	</div>

<script>

var stackmat = (function() {

//========== Hardware Part ==========
var audio_context;
var audio_stream, source, node;
var sample_rate;
var state = 'S';
var saved = false;
var loaded = false;

function init() {

	var getUserMedia = (window.navigator["getUserMedia"] ||
		window.navigator["webkitGetUserMedia"] ||
		window.navigator["mozGetUserMedia"] ||
		window.navigator["msGetUserMedia"]);

	var AudioContext = (window["AudioContext"] || window["webkitAudioContext"]);

	audio_context = new AudioContext();

	sample_rate = audio_context["sampleRate"] / 1200;
	agc_factor = 0.001 / sample_rate;

	edgeIdxDiff = Math.ceil(sample_rate / 6);
	lastVal.length = edgeIdxDiff;



	getUserMedia.call(window.navigator, {
		"audio": {
			"echoCancellation": false,
			"noiseSuppression": false
		}
	}, success, function(e) {
		var l = "";
		for (var key in e) {
			l = l + key + ": " + e[key] + "\n";
		}
		alert(l);
	});
}

function stop() {
	if (audio_stream != undefined) {
		source["disconnect"](node);
		node["disconnect"](audio_context["destination"]);
		audio_stream["stop"]();
		audio_stream = undefined;
	}
}

var last_power = 1;
var agc_factor = 0.001;

function success(stream) {
	audio_stream = stream;
	source = audio_context["createMediaStreamSource"](stream);
	node = audio_context["createScriptProcessor"](1024, 1, 1);

	node["onaudioprocess"] = function(e) {
		// console.log(+new Date);
		var input = e["inputBuffer"]["getChannelData"](0);
		var output = e["outputBuffer"]["getChannelData"](0);
		//console.log(output);
		//AGC
		for (var i = 0; i < input.length; i++) {
			var power = input[i] * input[i];
			last_power = Math.max(0.0001, last_power + (power - last_power) * agc_factor);
			var gain = 1 / Math.sqrt(last_power);
			procSignal(input[i] * gain, gain);
			// output[i] = input[i] * gain / 500;
		}
		$('#agc').html((1 / Math.sqrt(last_power)).toString().slice(0, 5));
		return;
	};
	source["connect"](node);
	node["connect"](audio_context["destination"]);
}

//========== Audio2Bits Part ==========
var lastVal = [];
var lastSgn = 0;
var edgeIdxDiff = 0;
var THRESHOLD_SCHM = 0.2;
var THRESHOLD_EDGE = 0.7;
var lenVoltageKeep = 0;

var dataBlob;
var distortionStat;

function procSignal(signal, curGain) {

	lastVal.unshift(signal);
	var isEdge = (lastVal.pop() - signal) * (lastSgn ? 1 : -1) > THRESHOLD_EDGE &&
		Math.abs(signal - (lastSgn ? 1 : -1)) - 1 > THRESHOLD_SCHM &&
		lenVoltageKeep > sample_rate * 0.6;

	if (isEdge) {
		for (var i = 0; i < Math.round(lenVoltageKeep / sample_rate); i++) {
			appendBit(lastSgn);
		}
		lastSgn ^= 1;
		lenVoltageKeep = 0;
	} else if (lenVoltageKeep > sample_rate * 2) {
		appendBit(lastSgn);
		lenVoltageKeep -= sample_rate;
	}

	lenVoltageKeep++;
	if (last_bit_length < 10) {
		distortionStat = (distortionStat || 0.001) * 0.99 + Math.pow(signal - (lastSgn ? 1 : -1), 2) * 0.01;
	} else if (last_bit_length > 100) {
		distortionStat = 1;
	}

}



var bitBuffer = [];
var byteBuffer = [];
var idle_val = 0;
var last_bit = 0;
var last_bit_length = 0;

function appendBit(bit) {
	
	bitBuffer.push(bit);
	
	if (bit != last_bit) {
		last_bit = bit;
		last_bit_length = 1;
	} else {
		last_bit_length++;
	}

	if (last_bit_length > 10) {

		idle_val = bit;
		bitBuffer = [];

		if (byteBuffer.length != 0) {
			byteBuffer = [];
		}

		if (last_bit_length > 100 && stackmat_state.on) {
			stackmat_state.on = false;
			callback(stackmat_state);
		} else if (last_bit_length > 700) {
			last_bit_length = 100;
			callback(stackmat_state);
		}
	} else {
		if (bitBuffer.length == 10) {
			if (bitBuffer[0] == idle_val || bitBuffer[9] != idle_val) {
				bitBuffer = bitBuffer.slice(1);
			} else {
				var val = 0;
				for (var i = 8; i > 0; i--) {
					val = val << 1 | (bitBuffer[i] == idle_val ? 1 : 0);
				}
				byteBuffer.push(String.fromCharCode(val));
				decode(byteBuffer);
				bitBuffer = [];
			}
		}
	}
}



function decode(byteBuffer) {

	if (byteBuffer.length != 9 && byteBuffer.length != 10)
		return;
	
	var re_head = /[ SILRCA]/;
	var re_number = /\d/;
	var head = byteBuffer[0];

	if (!re_head.exec(head))
		return;
	
	var time_milli = 0;
	var checksum = 64;
	
	if (byteBuffer.length == 9) {
		for (var i = 1; i < 6; i++) {
			if (!re_number.exec(byteBuffer[i]))
				return;
			checksum += Math.floor(byteBuffer[i]);
		}
		if (checksum != byteBuffer[6].charCodeAt(0)) 
			return;
		time_milli = Math.floor(byteBuffer[1] * 60000 + Math.floor(byteBuffer[2] + byteBuffer[3]) * 1000 + Math.floor(byteBuffer[4] + byteBuffer[5]) * 10);
	} else if (byteBuffer.length == 10) {
		for (var i = 1; i < 7; i++) {
			if (!re_number.exec(byteBuffer[i]))
				return;
			checksum += Math.floor(byteBuffer[i]);
		}
		if (checksum != byteBuffer[7].charCodeAt(0))
			return;
		time_milli = Math.floor(byteBuffer[1] * 60000) + Math.floor(byteBuffer[2] + byteBuffer[3]) * 1000 + Math.floor(byteBuffer[4] + byteBuffer[5] + byteBuffer[6]);
	}

	//console.log(stackmat_state);
	//status = 'Running';
	
	if(stackmat_state.signalHeader == 'S' && state != stackmat_state.signalHeader){
	
		state = stackmat_state.signalHeader;
		status = 'Stopped';
		event = $('input[name=event]:checked').val();

		$('#time').val(stackmat_state.time_milli);
		$('#date').val(moment().format('YYYY-MM-DD HH:mm:ss'));

	} else if(stackmat_state.signalHeader == 'A' && state != stackmat_state.signalHeader){
		state = stackmat_state.signalHeader;
		status = 'Ready';
		loaded = true;
	} else if(stackmat_state.signalHeader == 'I' && state != stackmat_state.signalHeader){
		state = stackmat_state.signalHeader;
		status = 'Stopped';
		$('#d_1').text('');
		$('#d_2').text('');
	} else if(stackmat_state.signalHeader == 'C' && state != stackmat_state.signalHeader){
		state = stackmat_state.signalHeader;
		status = '--';	
	} else if(stackmat_state.signalHeader == ' ' && state != stackmat_state.signalHeader){
		state = stackmat_state.signalHeader;
		status = 'Running';	
	}

	if(byteBuffer[1] > 0)
		$('#d_1').html(byteBuffer[1]+'<span style="padding-left:20px;top:-10px;position:relative;">:</span>');
		else
		$('#d_1').text('');
	if(byteBuffer[2] > 0)
		$('#d_2').text(byteBuffer[2]);
		else
		$('#d_2').text('');
	$('#d_3').text(byteBuffer[3]);
	$('#d_4').text(byteBuffer[4]);
	$('#d_5').text(byteBuffer[5]);
	$('#d_6').text(byteBuffer[6]);

	var new_state = {}
	new_state.time_milli = time_milli;
	new_state.on = true;
	new_state.greenLight = head == 'A';
	new_state.leftHand = head == 'L' || head == 'A' || head == 'C';
	new_state.rightHand = head == 'R' || head == 'A' || head == 'C';
	new_state.running = (head != 'S' || stackmat_state.signalHeader == 'S') && (head == ' ' || new_state.time_milli > stackmat_state.time_milli);
	new_state.signalHeader = head;
	new_state.unknownRunning = !stackmat_state.on;

	stackmat_state = new_state;
	//console.log(new_state);
	//console.log(stackmat_state);
	callback(stackmat_state);
}

var stackmat_state = {
	time_milli: 0,
	on: false,
	greenLight: false,
	leftHand: false,
	rightHand: false,
	running: false,
	unknownRunning: true,
	signalHeader: 'I'
};

var callback = $.noop;



return {
	init: init,
	stop: stop,
	setCallBack: function(func) {
		callback = func;
	}
}
})();

$('.load').on('click',function(){
		stackmat.init();
		$('.timer-display').show();
		$(this).hide();
	});


</script>

	

	<script>
			
			
		
			$(document).foundation();
		
	</script>

    


</div></body></html>